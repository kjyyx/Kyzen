import React, { useEffect, useRef } from "react";
import { motion, useAnimation, useInView } from "framer-motion";

const HeaderGrid = () => {
    const containerRef = useRef(null);
    const isInView = useInView(containerRef, { once: true });
    const controls = useAnimation();

    useEffect(() => {
        if (isInView) {
            controls.start("visible");
        }
    }, [isInView, controls]);

    // Background animation variants
    const circleVariants = {
        hidden: { scale: 0, opacity: 0 },
        visible: {
            scale: 1,
            opacity: 0.3,
            transition: {
                duration: 2,
                ease: "easeOut",
            },
        },
        pulse: {
            scale: [1, 1.1, 1],
            opacity: [0.3, 0.5, 0.3],
            transition: {
                duration: 4,
                repeat: Infinity,
                ease: "easeInOut",
            },
        },
    };

    // Animation variants for new elements
    const fadeInVariants = {
        hidden: { opacity: 0, y: 20 },
        visible: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 1,
                ease: "easeOut",
            },
        },
    };

    const avatarVariants = {
        hidden: { opacity: 0, scale: 0.8 },
        visible: {
            opacity: 1,
            scale: 1,
            transition: {
                duration: 1.2,
                ease: "easeOut",
                delay: 0.5,
            },
        },
    };

    return (
        <div className="relative min-h-screen">
            {/* Large Background Circle */}
            <motion.div
                className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[1000px] h-[1000px] border-2 border-pink-500/50 rounded-full z-10"
                variants={circleVariants}
                initial="hidden"
                animate={["visible", "pulse"]}
            />

            {/* Secondary Circle */}
            <motion.div
                className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[700px] h-[700px] border border-orange-500/50 rounded-full z-10"
                variants={circleVariants}
                initial="hidden"
                animate={["visible", "pulse"]}
                transition={{ delay: 0.5 }}
            />

            {/* Floating Particles */}
            {[...Array(12)].map((_, i) => (
                <motion.div
                    key={i}
                    className="absolute w-2 h-2 bg-purple-400/60 rounded-full z-20"
                    style={{
                        left: `${Math.random() * 100}%`,
                        top: `${Math.random() * 100}%`,
                    }}
                    animate={{
                        y: [0, -30, 0],
                        x: [0, Math.random() * 20 - 10, 0],
                        opacity: [0.6, 1, 0.6],
                        scale: [1, 1.5, 1],
                    }}
                    transition={{
                        duration: 3 + Math.random() * 2,
                        repeat: Infinity,
                        delay: Math.random() * 2,
                        ease: "easeInOut",
                    }}
                />
            ))}

            {/* Content Container */}
            <div
                className="relative z-40 min-h-screen flex items-center justify-center p-8 md:p-16"
                ref={containerRef}
            >
                {/* Large Background Text */}
                <div className="absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10 w-full overflow-hidden">
                    {/* <div
                        className="absolute inset-0 z-10 pointer-events-none"
                        style={{
                            background: 'linear-gradient(to right, #131313 0%, transparent 15%, transparent 85%, #131313 100%)'
                        }}
                    /> */}

                    {/* Japanese Character - Upper Left (Static) */}
                    <motion.div
                        className="absolute top-25 left-80 text-2xl md:text-5xl text-gray-300 font-light z-30"
                        variants={fadeInVariants}
                        initial="hidden"
                        animate={controls}
                        transition={{ delay: 0.8 }}
                    >
                        ケンジ
                    </motion.div>

                    {/* Japanese Character - Lower Right (Static) */}
                    <motion.div
                        className="absolute bottom-20 right-80 text-xl md:text-5xl text-gray-300 font-light z-30"
                        variants={fadeInVariants}
                        initial="hidden"
                        animate={controls}
                        transition={{ delay: 1.2 }}
                    >
                        カイゼン
                    </motion.div>

                    <motion.h1
                        className="text-[20vw] md:text-[18vw] lg:text-[25rem] text-pink-500 italic tracking-tight font-black text-center whitespace-nowrap"
                        variants={fadeInVariants}
                        initial="hidden"
                        animate={controls}
                    >
                        KYZEN
                    </motion.h1>
                </div>

                {/* Avatar Image - Centered and in front */}
                <motion.div
                    className="absolute top-[65%] left-1/2 -translate-x-1/2 -translate-y-1/2 z-40"
                    variants={avatarVariants}
                    initial="hidden"
                    animate={controls}
                >
                    <div
                        className="w-[600px] h-[700px] flex items-center justify-center"
                        style={{
                            maskImage:
                                "linear-gradient(to bottom, black 70%, transparent 100%)",
                            WebkitMaskImage:
                                "linear-gradient(to bottom, black 70%, transparent 100%)",
                        }}
                    >
                        <img
                            src="/src/assets/Avatar.png"
                            alt="Avatar"
                            className="w-full h-full object-contain drop-shadow-2xl"
                        />
                    </div>
                </motion.div>

                {/* Outline KYZEN Text - In front of everything */}
                {/* <motion.h1
                    className='absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-[20vw] md:text-[18vw] lg:text-[25rem] text-transparent italic tracking-tight font-black text-center whitespace-nowrap z-50 outline-text'
                    variants={fadeInVariants}
                    initial="hidden"
                    animate={controls}
                    style={{
                        WebkitTextStroke: '2px #ffffff',
                        textStroke: '3px #ffffff',
                    }}
                >
                    KYZEN
                </motion.h1> */}
            </div>

            {/* Supporting Text - Bottom Left */}
            <motion.div
                className="absolute bottom-50 left-65 max-w-md text-gray-300/90 text-sm md:text-base leading-relaxed z-30"
                variants={fadeInVariants}
                initial="hidden"
                animate={controls}
                transition={{ delay: 1.0 }}
            >
                <p className="mb-2">
                    In the digital realm of modern web development, there exists a
                    creative force known only as "The Developer." A place where code,
                    design, and innovation converge.
                </p>
                <p className="text-pink-400 font-medium">
                    Enter the portfolio, a digital space where creativity meets
                    technology.
                </p>
            </motion.div>

            {/* Enhanced Scroll Indicator */}
            <motion.div
                className="absolute bottom-8 left-1/2 transform -translate-x-1/2 z-50"
                initial={{ opacity: 0, y: 50, scale: 0.5 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{
                    delay: 3,
                    duration: 1,
                    type: "spring",
                    stiffness: 200,
                    damping: 20
                }}
            >
                <motion.div
                    className="flex flex-col items-center text-gray-400/80 cursor-pointer"
                    animate={{ y: [0, 15, 0] }}
                    transition={{ duration: 2, repeat: Infinity }}
                    whileHover={{
                        scale: 1.2,
                        color: "rgba(236, 72, 153, 0.9)"
                    }}
                >
                    <motion.span
                        className="text-sm mb-2 font-light italic"
                        animate={{
                            opacity: [0.6, 1, 0.6]
                        }}
                        transition={{
                            duration: 2,
                            repeat: Infinity
                        }}
                    >
                        Scroll to explore
                    </motion.span>
                    <motion.div
                        className="w-6 h-10 border-2 border-gray-400/40 rounded-full flex justify-center relative overflow-hidden"
                        whileHover={{
                            borderColor: "rgba(236, 72, 153, 0.8)",
                            boxShadow: "0 0 20px rgba(236, 72, 153, 0.4)"
                        }}
                    >
                        <motion.div
                            className="w-1 h-3 bg-gradient-to-b from-pink-400 to-orange-400 rounded-full mt-2"
                            animate={{ y: [0, 10, 0], opacity: [1, 0, 1] }}
                            transition={{ duration: 1.5, repeat: Infinity }}
                        />

                        {/* Scroll indicator glow */}
                        <motion.div
                            className="absolute inset-0 bg-gradient-to-b from-pink-400/20 to-orange-400/20 rounded-full"
                            animate={{
                                opacity: [0, 0.5, 0],
                                scale: [1, 1.2, 1]
                            }}
                            transition={{
                                duration: 2,
                                repeat: Infinity,
                                delay: 0.5
                            }}
                        />
                    </motion.div>
                </motion.div>
            </motion.div>

            
            {/* Custom CSS for gradient animation */}
            <style jsx>{`
        @keyframes gradient {
          0% {
            background-position: 0% 50%;
          }
          50% {
            background-position: 100% 50%;
          }
          100% {
            background-position: 0% 50%;
          }
        }
        .animate-gradient {
          animation: gradient 3s ease infinite;
        }
        .bg-300\% {
          background-size: 300% 300%;
        }
      `}</style>
        </div>
    );
};

export default HeaderGrid;









import React, { useEffect, useRef, memo, useMemo } from "react";
import { motion, useAnimation, useInView } from "framer-motion";
import Avatar from '../../assets/Avatar-2.png';

import ScrollAnimatedSection from '../../common/ScrollAnimatedSection';
import StaggerContainer from '../../common/StaggerContainer';
import { useHeroScrollAnimation } from '../../hooks/useScrollAnimation';
import { getAnimationConfig, createMobileOptimizedVariants } from '../../utils/helpers';

// ===== SUB-COMPONENTS (Mobile Optimized) =====

// Avatar Image Component - Mobile Optimized
const AvatarImage = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    const avatarVariants = createMobileOptimizedVariants({
        hidden: { opacity: 0, scale: 0.8, y: 50 },
        visible: { 
            opacity: 1, 
            scale: 1, 
            y: 0,
            transition: {
                duration: 1.5,
                ease: "easeOut",
                delay: 1.0
            }
        }
    });

    return (
        <motion.div
            className="absolute top-[45%] xs:top-[46%] sm:top-[47%] md:top-[55%] lg:top-[60%] xl:top-[65%] left-1/2 -translate-x-1/2 -translate-y-1/2 z-50"
            variants={avatarVariants}
            initial="hidden"
            animate="visible"
        >
            <motion.div
                className="w-[280px] h-[330px] xs:w-[320px] xs:h-[380px] sm:w-[360px] sm:h-[420px] md:w-[500px] md:h-[600px] lg:w-[600px] lg:h-[700px] flex items-center justify-center relative"
                style={{
                    maskImage: "linear-gradient(to bottom, black 70%, transparent 100%)",
                    WebkitMaskImage: "linear-gradient(to bottom, black 70%, transparent 100%)",
                }}
                animate={animationConfig.reduce ? {} : {
                    y: [0, -8, 0],
                }}
                transition={animationConfig.reduce ? {} : {
                    duration: 4,
                    repeat: Infinity,
                    ease: "easeInOut"
                }}
            >
                <AvatarBackdrop />
                <img
                    src={Avatar}
                    alt="Avatar"
                    className="w-full h-full object-contain drop-shadow-2xl relative z-10"
                />
            </motion.div>
        </motion.div>
    );
});

// Avatar Backdrop Component - Mobile Optimized
const AvatarBackdrop = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    if (animationConfig.reduce) {
        return (
            <div className="absolute inset-0 bg-purple-500/5 rounded-full blur-xl" />
        );
    }
    
    return (
        <motion.div
            className="absolute inset-0 bg-purple-500/5 rounded-full blur-3xl"
            animate={{
                scale: [1, 1.1, 1],
                opacity: [0.3, 0.5, 0.3]
            }}
            transition={{
                duration: 3,
                repeat: Infinity,
                ease: "easeInOut"
            }}
        />
    );
});

// Background Circles Component - Mobile Optimized
const BackgroundCircles = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <ScrollAnimatedSection
            animationType="scale"
            delay={animationConfig.reduce ? 0 : 0.1}
            className="absolute inset-0 z-0"
        >
            <StaggerContainer
                staggerDelay={animationConfig.reduce ? 0.1 : 0.5}
                className="relative w-full h-full"
            >
                <motion.div
                    className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[350px] h-[350px] xs:w-[400px] xs:h-[400px] sm:w-[500px] sm:h-[500px] md:w-[600px] md:h-[600px] lg:w-[800px] lg:h-[800px] xl:w-[1000px] xl:h-[1000px] border-2 border-pink-500/50 rounded-full"
                    animate={animationConfig.reduce ? {} : {
                        scale: [1, 1.1, 1],
                        opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={animationConfig.reduce ? {} : {
                        duration: 4,
                        repeat: Infinity,
                        ease: "easeInOut"
                    }}
                    style={{
                        opacity: animationConfig.reduce ? 0.3 : undefined
                    }}
                />
                <motion.div
                    className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[250px] h-[250px] xs:w-[300px] xs:h-[300px] sm:w-[350px] sm:h-[350px] md:w-[400px] md:h-[400px] lg:w-[600px] lg:h-[600px] xl:w-[700px] xl:h-[700px] border border-orange-500/50 rounded-full"
                    animate={animationConfig.reduce ? {} : {
                        scale: [1, 1.1, 1],
                        opacity: [0.3, 0.5, 0.3]
                    }}
                    transition={animationConfig.reduce ? {} : {
                        duration: 4,
                        repeat: Infinity,
                        ease: "easeInOut",
                        delay: 0.5
                    }}
                    style={{
                        opacity: animationConfig.reduce ? 0.3 : undefined
                    }}
                />
            </StaggerContainer>
        </ScrollAnimatedSection>
    );
});

// Floating Particles Component - Mobile Optimized
const FloatingParticles = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    // Disable particles on mobile for performance
    if (animationConfig.reduce) return null;
    
    const particles = useMemo(() => 
        Array.from({ length: 8 }, (_, i) => ({ // Reduced from 12 to 8 particles
            id: i,
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
            duration: 3 + Math.random() * 2,
            delay: Math.random() * 2,
            x: Math.random() * 20 - 10
        })), []
    );

    return (
        <ScrollAnimatedSection
            animationType="fadeIn"
            delay={0.3}
            className="absolute inset-0 pointer-events-none"
        >
            <StaggerContainer
                staggerDelay={0.05}
                className="relative w-full h-full"
            >
                {particles.map((particle) => (
                    <FloatingParticle key={particle.id} particle={particle} />
                ))}
            </StaggerContainer>
        </ScrollAnimatedSection>
    );
});

// Individual Floating Particle Component - Mobile Optimized
const FloatingParticle = memo(({ particle }) => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <motion.div
            className="absolute w-1 h-1 xs:w-1.5 xs:h-1.5 sm:w-2 sm:h-2 bg-purple-400/60 rounded-full z-10"
            style={{
                left: particle.left,
                top: particle.top,
            }}
            animate={{
                y: [0, -30, 0],
                x: [0, particle.x, 0],
                opacity: [0.6, 1, 0.6],
                scale: [1, 1.5, 1],
            }}
            transition={{
                duration: particle.duration,
                repeat: Infinity,
                delay: particle.delay,
                ease: "easeInOut",
            }}
        />
    );
});

// Header Content Component - Mobile Optimized
const HeaderContent = memo(() => (
    <div className="relative z-20 min-h-screen flex items-center justify-center p-3 xs:p-4 sm:p-6 md:p-8 lg:p-12 xl:p-16">
        <TitleSection />
        <AvatarImage />
    </div>
));

// Japanese Text Component - Mobile Optimized
const JapaneseText = memo(({ position, text, delay }) => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    const textVariants = createMobileOptimizedVariants({
        hidden: { opacity: 0, x: -30, rotate: -5 },
        visible: { 
            opacity: 1, 
            x: 0, 
            rotate: 0,
            transition: {
                duration: 1.2,
                ease: "easeOut",
                delay
            }
        }
    });

    return (
        <motion.span
            className={`absolute ${position} text-[0.13em] xs:text-[0.14em] sm:text-[0.15em] md:text-[0.16em] text-gray-300/80 font-light tracking-wider drop-shadow-lg`}
            variants={textVariants}
            initial="hidden"
            animate="visible"
        >
            {text}
        </motion.span>
    );
});

// Main Title Component - Mobile Optimized
const MainTitle = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    const titleVariants = createMobileOptimizedVariants({
        hidden: { opacity: 0, y: 100, scale: 0.8 },
        visible: { 
            opacity: 1, 
            y: 0, 
            scale: 1,
            transition: {
                duration: 1.8,
                ease: "easeOut",
                delay: 0.5
            }
        }
    });

    return (
        <motion.h1
            className="relative text-[22vw] xs:text-[20vw] sm:text-[18vw] md:text-[16vw] lg:text-[14vw] xl:text-[12vw] 2xl:text-[25rem] italic tracking-tight font-black text-center whitespace-nowrap"
            variants={titleVariants}
            initial="hidden"
            animate="visible"
            style={{
                textShadow: "0 0 30px rgba(255, 117, 223, 0.3), 0 0 60px rgba(255, 117, 223, 0.1)"
            }}
        >
            <motion.span
                className="relative bg-gradient-to-r from-white via-[#ff75df] to-purple-400 bg-clip-text text-transparent inline-block px-1 xs:px-2 sm:px-3 md:px-4 lg:px-6 py-2 xs:py-3 sm:py-4 md:py-6 lg:py-8"
                animate={animationConfig.reduce ? {} : {
                    textShadow: [
                        "0 0 30px rgba(255, 117, 223, 0.3)",
                        "0 0 40px rgba(255, 117, 223, 0.4)",
                        "0 0 30px rgba(255, 117, 223, 0.3)"
                    ]
                }}
                transition={animationConfig.reduce ? {} : {
                    duration: 3,
                    repeat: Infinity,
                    ease: "easeInOut"
                }}
            >
                KYZEN
                
                <JapaneseText
                    position="left-[0.9em] xs:left-[0.95em] sm:left-[1em] top-[1.3em] xs:top-[1.35em] sm:top-[1.4em]"
                    text="ケンジ"
                    delay={animationConfig.reduce ? 0.1 : 1.4}
                />
                
                <JapaneseText
                    position="right-[0.9em] xs:right-[0.95em] sm:right-[1em] bottom-[1.3em] xs:bottom-[1.35em] sm:bottom-[1.4em]"
                    text="カイゼン"
                    delay={animationConfig.reduce ? 0.15 : 1.8}
                />
            </motion.span>
        </motion.h1>
    );
});

// Scroll Indicator Dot Component - Mobile Optimized
const ScrollIndicatorDot = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <motion.div
            className="w-4 h-6 xs:w-5 xs:h-7 sm:w-5 sm:h-8 md:w-6 md:h-10 border-2 border-gray-400/40 rounded-full flex justify-center relative overflow-hidden"
            whileHover={animationConfig.reduce ? {} : {
                borderColor: "rgba(236, 72, 153, 0.8)",
                boxShadow: "0 0 20px rgba(236, 72, 153, 0.4)"
            }}
        >
            <motion.div
                className="w-0.5 h-1 xs:w-1 xs:h-1.5 sm:w-1 sm:h-2 md:h-3 bg-pink-400 rounded-full mt-0.5 xs:mt-1 md:mt-2"
                animate={{ y: [0, 8, 0], opacity: [1, 0, 1] }}
                transition={{ 
                    duration: animationConfig.reduce ? 1 : 1.5, 
                    repeat: Infinity 
                }}
            />
            {!animationConfig.reduce && (
                <motion.div
                    className="absolute inset-0 bg-pink-400/10 rounded-full"
                    animate={{
                        opacity: [0, 0.3, 0],
                        scale: [1, 1.2, 1]
                    }}
                    transition={{
                        duration: 2,
                        repeat: Infinity,
                        delay: 0.5
                    }}
                />
            )}
        </motion.div>
    );
});

// Scroll Indicator Component - Mobile Optimized
const ScrollIndicator = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <ScrollAnimatedSection
            animationType="fadeUp"
            delay={animationConfig.reduce ? 0.5 : 2.5}
            className="absolute bottom-3 xs:bottom-4 sm:bottom-6 md:bottom-8 left-1/2 transform -translate-x-1/2 z-70"
        >
            <motion.div
                className="flex flex-col items-center text-gray-400/80 cursor-pointer"
                animate={animationConfig.reduce ? {} : { y: [0, 15, 0] }}
                transition={animationConfig.reduce ? {} : { 
                    duration: 2, 
                    repeat: Infinity 
                }}
                whileHover={animationConfig.reduce ? {} : {
                    scale: 1.2,
                    color: "rgba(236, 72, 153, 0.9)"
                }}
            >
                <ScrollIndicatorLabel />
                <ScrollIndicatorDot />
            </motion.div>
        </ScrollAnimatedSection>
    );
});

// Scroll Indicator Label Component - Mobile Optimized
const ScrollIndicatorLabel = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <motion.span
            className="text-xs sm:text-sm md:text-base mb-1 xs:mb-2 font-light italic tracking-wider"
            animate={animationConfig.reduce ? {} : {
                opacity: [0.6, 1, 0.6]
            }}
            transition={animationConfig.reduce ? {} : {
                duration: 2,
                repeat: Infinity
            }}
            style={{
                opacity: animationConfig.reduce ? 0.8 : undefined
            }}
        >
            Scroll to explore
        </motion.span>
    );
});

// Supporting Text Component - Mobile Optimized
const SupportingText = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <ScrollAnimatedSection
            animationType="fadeLeft"
            delay={animationConfig.reduce ? 0.3 : 1.4}
            className="absolute bottom-20 xs:bottom-24 sm:bottom-28 md:bottom-32 lg:bottom-40 xl:bottom-50 left-3 right-3 xs:left-4 xs:right-auto xs:max-w-xs sm:left-6 sm:max-w-sm md:left-8 md:max-w-md lg:left-16 lg:max-w-lg xl:left-65 xl:max-w-xl text-gray-300/90 text-xs xs:text-sm sm:text-base lg:text-lg leading-relaxed z-60 px-2 xs:px-3 sm:px-4"
        >
            <SupportingTextParagraphs />
        </ScrollAnimatedSection>
    );
});

// Supporting Text Paragraphs Component - Mobile Optimized
const SupportingTextParagraphs = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <>
            <motion.p 
                className="mb-2 font-light tracking-wide"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ 
                    delay: animationConfig.reduce ? 0.1 : 0.5,
                    duration: animationConfig.duration 
                }}
            >
                In the digital realm of modern web development, there exists a
                creative force known only as <span className="text-pink-400/90 font-medium">"The Developer."</span> A place where code,
                design, and innovation converge.
            </motion.p>
            <motion.p
                className="text-pink-400/90 font-medium tracking-wide"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ 
                    delay: animationConfig.reduce ? 0.2 : 0.7,
                    duration: animationConfig.duration 
                }}
                whileHover={animationConfig.reduce ? {} : {
                    x: 10,
                    color: "rgba(236, 72, 153, 1)",
                    transition: { duration: 0.3 }
                }}
            >
                Enter the portfolio, a digital space where creativity meets
                technology.
            </motion.p>
        </>
    );
});

// Title Section Component
const TitleSection = memo(() => (
    <div className="absolute top-1/4 xs:top-[28%] sm:top-[30%] md:top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-30 w-full overflow-hidden">
        <MainTitle />
    </div>
));

// Performance Monitor Component - Mobile Optimized
const PerformanceMonitor = memo(() => {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    useEffect(() => {
        if (animationConfig.reduce) return; // Skip monitoring on mobile
        
        const observer = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            entries.forEach((entry) => {
                if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {
                    console.log('HeaderGrid FCP:', entry.startTime);
                }
            });
        });
        
        observer.observe({ entryTypes: ['paint'] });
        
        return () => observer.disconnect();
    }, [animationConfig.reduce]);
    
    return null;
});

// ===== MAIN COMPONENT =====

/**
 * HeaderGrid Component - Mobile Optimized
 * 
 * Mobile Optimizations Applied:
 * - Conditional animation rendering based on device detection
 * - Simplified animation variants for mobile
 * - Reduced particle count and disabled on mobile
 * - Faster animation durations on mobile
 * - Removed complex hover effects on mobile
 * - Performance monitoring disabled on mobile
 * 
 * Component Tree Structure:
 * HeaderGrid
 * ├── PerformanceMonitor (desktop only)
 * ├── BackgroundCircles (simplified on mobile)
 * ├── FloatingParticles (disabled on mobile)
 * │   └── FloatingParticle
 * ├── HeaderContent
 * │   ├── TitleSection
 * │   │   ├── MainTitle (simplified animations on mobile)
 * │   │   │   └── JapaneseText (faster delays on mobile)
 * │   │   └── AvatarImage (reduced floating animation on mobile)
 * │   │       └── AvatarBackdrop (static on mobile)
 * ├── SupportingText (faster entrance on mobile)
 * │   └── SupportingTextParagraphs (simplified hover on mobile)
 * └── ScrollIndicator (reduced animations on mobile)
 *     ├── ScrollIndicatorLabel (static opacity on mobile)
 *     └── ScrollIndicatorDot (simplified on mobile)
 */
function HeaderGrid() {
    const animationConfig = useMemo(() => getAnimationConfig(), []);
    
    return (
        <div id="header-section" className="relative min-h-screen overflow-hidden">
            {/* Performance Monitor - Desktop Only */}
            <PerformanceMonitor />
            
            {/* Background Effects - Simplified on Mobile */}
            <BackgroundCircles />
            
            {/* Floating Particles - Disabled on Mobile */}
            <FloatingParticles />

            {/* Main Content */}
            <HeaderContent />

            {/* Supporting Text - Faster Entrance on Mobile */}
            <SupportingText/>

            {/* Scroll Indicator - Simplified on Mobile */}
            <ScrollIndicator />
        </div>
    );
}

export default memo(HeaderGrid);