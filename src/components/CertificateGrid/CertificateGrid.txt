import React, { useState } from "react";
import { motion, AnimatePresence } from 'framer-motion';
import {
    Grid3X3,
    Code2,
    Cloud,
    Shield,
    Wifi,
    ExternalLink,
    Award,
    Calendar,
    CheckCircle
} from 'lucide-react';
import './CertificateGrid.css'

const certificates = [
    {
        title: "AWS Academy Graduate - AWS Academy Cloud Foundations",
        issuer: "Amazon Web Services Training and Certification",
        date: "April 23, 2024",
        image: "/src/assets/Certificates/AWS_Academy_Cloud_Foundations-1.png",
        skills: ["AWS Architecture", "AWS Cloud", "AWS Core Services", "AWS Pricing", "AWS Support"],
        verification: "/src/assets/Certificates/AWS_Academy_Cloud_Foundations.pdf",
        credentialId: "a99d8a81-6fc2-4b92-96f8-6c01d7dbaa6a",
        category: "Cloud",
        description: "Earners of this badge have taken the AWS Academy Cloud Foundations course and demonstrated knowledge of AWS Cloud concepts, core services, security, architecture, pricing, and support."
    },
    {
        title: "Introduction to Cybersecurity",
        issuer: "Cisco",
        date: "November 8, 2021",
        image: "/src/assets/Certificates/Introduction_to_Cybersecurity-1.png",
        skills: ["Cybersecurity", "Threat Detection", "Cyber Best Practices", "Network Vulnerabilities", "Privacy And Data Confidentiality"],
        verification: "/src/assets/Certificates/Introduction_to_Cybersecurity.pdf",
        credentialId: "5c161100-bac4-4067-8114-f920e55d8fdd",
        category: "Security",
        description: "Cisco verifies the earner of this badge successfully completed the Introduction to Cybersecurity course and understands fundamental cybersecurity concepts and best practices."
    },
    {
        title: "Introduction to IoT",
        issuer: "Cisco",
        date: "February 17, 2022",
        image: "/src/assets/Certificates/Introduction_to_IoT-1.png",
        skills: ["Digital Transformation", "Internet Of Things", "IoT", "Connected Devices", "IoT Security"],
        verification: "/src/assets/Certificates/Introduction_to_IoT.pdf",
        credentialId: "acc959ac-025e-4efd-b696-a23524788986",
        category: "IoT",
        description: "Cisco verifies the earner of this badge successfully completed the Introduction to IoT course and understands IoT fundamentals, applications, and digital transformation concepts."
    },
    {
        title: "JavaScript Essentials 1",
        issuer: "Cisco (in collaboration with OpenEDG JS Institute)",
        date: "October 10, 2024",
        image: "/src/assets/Certificates/JavaScriptEssentials-1.png",
        skills: ["JavaScript", "Data Types", "Functions", "Control Flow", "Debugging", "DOM Manipulation", "Event Handling", "Variables", "Operators"],
        verification: "/src/assets/Certificates/JavaScriptEssentials.pdf",
        credentialId: "0e37fd57-d72f-43b2-a87d-9eabbd4c1b3e",
        category: "Development",
        description: "Cisco, in collaboration with OpenEDG JS Institute, verifies the earner successfully completed JavaScript Essentials 1 and demonstrates proficiency in fundamental JavaScript programming concepts."
    },
    {
        title: "CyberOps Associate",
        issuer: "Cisco",
        date: "November 26, 2023",
        image: "/src/assets/Certificates/CyberOps_Associate-1.png",
        skills: ["Security Operations", "Incident Response", "Threat Analysis", "Network Security", "Security Monitoring", "Digital Forensics", "SIEM Operations"],
        verification: "/src/assets/Certificates/CyberOps_Associate.pdf",
        credentialId: "CYOPS-001-2023",
        category: "Security",
        description: "Cisco verifies the earner successfully completed the CyberOps Associate certification, validating skills in security operations, threat detection, incident response, and network security monitoring."
    }
];

const seminars = [
    {
        title: "Red Hat System Administration I (RH124)",
        organizer: "Red Hat Academy",
        date: "November 12, 2022",
        location: "Online Event",
        image: "/src/assets/Seminars/RedHat_Certificate.png",
        type: "Training Course"
    },
    {
        title: "Cybersecurity in the Age of A.I. Navigating the Double-Edged Sword",
        organizer: "Holy Angel University School of Computing",
        date: "February 7, 2025",
        location: "Holy Angel University",
        image: "/src/assets/Seminars/Cybersecurity_AI_Certificate.jpg",
        type: "Conference"
    },
    {
        title: "Git It Done: Build a Foundation with Version Control",
        organizer: "Code Geeks",
        date: "October 5, 2024",
        location: "Online Event",
        image: "/src/assets/Seminars/Git_Certificate.png",
        type: "Workshop"
    },
    {
        title: "1st Regional Blockchain Conference 2024",
        organizer: "Holy Angel University",
        date: "July 19, 2024",
        location: "Holy Angel University",
        image: "/src/assets/Seminars/Blockchain_Certificate.jpg",
        type: "Conference"
    },
    {
        title: "Cyber Resilience in the AI Era",
        organizer: "PSM in Cybersecurity",
        date: "January 31, 2025",
        location: "Holy Angel University",
        image: "/src/assets/Seminars/Cyber_Resilience_Certificate.jpg",
        type: "Seminar"
    }
];

const categories = [
    { name: "All", icon: Grid3X3, count: certificates.length },
    { name: "Development", icon: Code2, count: certificates.filter(c => c.category === "Development").length },
    { name: "Cloud", icon: Cloud, count: certificates.filter(c => c.category === "Cloud").length },
    { name: "Security", icon: Shield, count: certificates.filter(c => c.category === "Security").length },
    { name: "IoT", icon: Wifi, count: certificates.filter(c => c.category === "IoT").length }
];

// Animation variants
const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: {
            staggerChildren: 0.1
        }
    }
};

const cardVariants = {
    hidden: { 
        opacity: 0, 
        y: 50,
        scale: 0.9
    },
    visible: { 
        opacity: 1, 
        y: 0,
        scale: 1,
        transition: {
            type: "spring",
            stiffness: 100,
            damping: 15
        }
    },
    hover: {
        y: -10,
        scale: 1.05,
        transition: {
            type: "spring",
            stiffness: 300,
            damping: 20
        }
    }
};

const flipVariants = {
    front: {
        rotateY: 0,
        transition: { duration: 0.6, ease: "easeInOut" }
    },
    back: {
        rotateY: 180,
        transition: { duration: 0.6, ease: "easeInOut" }
    }
};

// Enhanced CertificateCard component
function CertificateCard({ certificate, index }) {
    const [isFlipped, setIsFlipped] = useState(false);
    const [imageLoaded, setImageLoaded] = useState(false);
    const [isHovered, setIsHovered] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const handleVerificationClick = (e) => {
        e.stopPropagation();
        setIsModalOpen(true);
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };

    return (
        <>
            <motion.div 
                className="relative group perspective-1000"
                variants={cardVariants}
                whileHover="hover"
                layout
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
            >
                {/* Enhanced glowing background effect */}
                <motion.div 
                    className="absolute -inset-4 bg-white/10 rounded-2xl blur-xl opacity-0 group-hover:opacity-100 transition-all duration-700"
                    initial={{ scale: 0.8, opacity: 0 }}
                    whileHover={{ scale: 1.1, opacity: 1 }}
                    animate={{ 
                        scale: isHovered ? [1, 1.05, 1] : 1,
                        opacity: isHovered ? [0.3, 0.6, 0.3] : 0
                    }}
                    transition={{ duration: 2, repeat: isHovered ? Infinity : 0 }}
                />

                <motion.div
                    className={`relative w-full h-[400px] transition-all duration-700 preserve-3d cursor-pointer`}
                    onClick={() => setIsFlipped(!isFlipped)}
                    animate={isFlipped ? "back" : "front"}
                    variants={flipVariants}
                    style={{ transformStyle: "preserve-3d" }}
                >
                    {/* Front of card */}
                    <motion.div className="absolute inset-0 backface-hidden">
                        <div className="relative w-full h-full bg-white/15 rounded-xl border border-white/20 backdrop-blur-[20px] overflow-hidden">
                            
                            {/* Certificate image background */}
                            <div className="absolute inset-0">
                                <motion.img 
                                    src={certificate.image} 
                                    alt={certificate.title}
                                    className={`w-full h-full object-cover transition-all duration-500 ${imageLoaded ? 'opacity-30' : 'opacity-0'}`}
                                    onLoad={() => setImageLoaded(true)}
                                    animate={{ 
                                        scale: isHovered ? 1.05 : 1,
                                        filter: isHovered ? 'brightness(1.1)' : 'brightness(1)'
                                    }}
                                    transition={{ duration: 0.3 }}
                                />
                                <div className="absolute inset-0 bg-black/60" />
                            </div>

                            {/* Enhanced corner decorations */}
                            <motion.div 
                                className="absolute top-4 right-4 w-8 h-8 border-t-2 border-r-2 border-[#ff75df]/40 rounded-tr-lg"
                                initial={{ opacity: 0, scale: 0 }}
                                animate={{ opacity: isHovered ? 1 : 0.3, scale: isHovered ? 1.2 : 1 }}
                                transition={{ duration: 0.3 }}
                            />
                            <motion.div 
                                className="absolute bottom-4 left-4 w-8 h-8 border-b-2 border-l-2 border-[#ff75df]/40 rounded-bl-lg"
                                initial={{ opacity: 0, scale: 0 }}
                                animate={{ opacity: isHovered ? 1 : 0.3, scale: isHovered ? 1.2 : 1 }}
                                transition={{ duration: 0.3, delay: 0.1 }}
                            />

                            {/* Content overlay */}
                            <div className="relative z-10 p-6 h-full flex flex-col justify-between">
                                {/* Header */}
                                <div>
                                    <motion.div 
                                        className="flex items-center justify-between mb-4"
                                        initial={{ opacity: 0, y: -20 }}
                                        animate={{ opacity: 1, y: 0 }}
                                    >
                                        <motion.span 
                                            className="px-3 py-1 text-xs italic tracking-tight font-black text-white bg-white/20 backdrop-blur-sm rounded-full border border-white/30"
                                            whileHover={{ scale: 1.1 }}
                                            animate={{ 
                                                backgroundColor: isHovered ? 'rgba(255, 117, 223, 0.2)' : 'rgba(255, 255, 255, 0.2)'
                                            }}
                                        >
                                            {certificate.category}
                                        </motion.span>
                                        <span className="text-white/70 text-sm font-medium flex items-center gap-1">
                                            <motion.div
                                                animate={{ rotate: isHovered ? 360 : 0 }}
                                                transition={{ duration: 0.8 }}
                                            >
                                                <Calendar className="w-3 h-3" />
                                            </motion.div>
                                            {new Date(certificate.date).getFullYear()}
                                        </span>
                                    </motion.div>

                                    <motion.h3 
                                        className="text-white text-xl mb-3 italic tracking-tight font-black"
                                        initial={{ opacity: 0 }}
                                        animate={{ 
                                            opacity: 1,
                                            x: isHovered ? 3 : 0,
                                            textShadow: isHovered ? '0 0 10px rgba(255, 117, 223, 0.3)' : '0 0 0px rgba(255, 117, 223, 0)'
                                        }}
                                        transition={{ duration: 0.3 }}
                                    >
                                        {certificate.title}
                                    </motion.h3>

                                    <motion.p 
                                        className="text-white/90 text-sm font-medium mb-4 flex items-center gap-2"
                                        initial={{ opacity: 0 }}
                                        animate={{ 
                                            opacity: 1,
                                            x: isHovered ? 3 : 0
                                        }}
                                        transition={{ duration: 0.3, delay: 0.1 }}
                                    >
                                        <motion.div
                                            animate={{ scale: isHovered ? [1, 1.2, 1] : 1 }}
                                            transition={{ duration: 0.6, repeat: isHovered ? Infinity : 0 }}
                                        >
                                            <Award className="w-4 h-4 text-[#ff75df]" />
                                        </motion.div>
                                        {certificate.issuer}
                                    </motion.p>
                                </div>

                                {/* Enhanced skills preview */}
                                <motion.div 
                                    className="mb-4"
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ 
                                        opacity: 1, 
                                        y: 0,
                                        x: isHovered ? 3 : 0
                                    }}
                                    transition={{ duration: 0.3, delay: 0.2 }}
                                >
                                    <div className="flex flex-wrap gap-2">
                                        {certificate.skills.slice(0, 3).map((skill, idx) => (
                                            <motion.span 
                                                key={skill} 
                                                className="px-3 py-1 text-xs font-medium text-white/90 bg-white/20 backdrop-blur-sm rounded-full border border-white/30"
                                                initial={{ opacity: 0, scale: 0.8 }}
                                                animate={{ opacity: 1, scale: 1 }}
                                                whileHover={{ scale: 1.05, backgroundColor: "rgba(255, 117, 223, 0.2)" }}
                                            >
                                                {skill}
                                            </motion.span>
                                        ))}
                                        {certificate.skills.length > 3 && (
                                            <motion.span 
                                                className="px-3 py-1 text-xs font-medium text-white/70 bg-white/10 backdrop-blur-sm rounded-full border border-white/20"
                                                initial={{ opacity: 0, scale: 0.8 }}
                                                animate={{ opacity: 1, scale: 1 }}
                                            >
                                                +{certificate.skills.length - 3} more
                                            </motion.span>
                                        )}
                                    </div>
                                </motion.div>

                                {/* Enhanced bottom section */}
                                <div className="flex items-center justify-between">
                                    {/* View certificate indicator */}
                                    <motion.div 
                                        className="flex items-center gap-2"
                                        animate={{ opacity: isHovered ? 1 : 0.6 }}
                                        transition={{ duration: 0.3 }}
                                        onClick={handleVerificationClick}
                                    >
                                        <span className="text-white/70 text-xs italic">
                                            Click to view
                                        </span>
                                        <motion.div
                                            animate={{ x: isHovered ? [0, 3, 0] : 0 }}
                                            transition={{ duration: 0.8, repeat: isHovered ? Infinity : 0 }}
                                        >
                                            <ExternalLink className="w-3 h-3 text-[#ff75df]" />
                                        </motion.div>
                                    </motion.div>

                                    {/* Flip indicator */}
                                    <motion.div 
                                        className="w-8 h-8 border-2 border-[#ff75df]/50 rounded-full flex items-center justify-center"
                                        whileHover={{ borderColor: "#ff75df", scale: 1.1 }}
                                        animate={{ 
                                            rotate: isHovered ? [0, 360] : 0,
                                            borderColor: isHovered ? '#ff75df' : 'rgba(255, 117, 223, 0.5)'
                                        }}
                                        transition={{ 
                                            rotate: { duration: 2, repeat: isHovered ? Infinity : 0, ease: "linear" },
                                            borderColor: { duration: 0.3 }
                                        }}
                                    >
                                        <div className="w-2 h-2 bg-[#ff75df] rounded-full"></div>
                                    </motion.div>
                                </div>
                            </div>

                            {/* Subtle floating particles */}
                            {isHovered && (
                                <div className="absolute inset-0 pointer-events-none">
                                    {[...Array(3)].map((_, i) => (
                                        <motion.div
                                            key={i}
                                            className="absolute w-1 h-1 bg-white/30 rounded-full"
                                            initial={{ 
                                                x: Math.random() * 100 + '%', 
                                                y: '100%',
                                                opacity: 0 
                                            }}
                                            animate={{ 
                                                y: '-20%',
                                                opacity: [0, 0.6, 0]
                                            }}
                                            transition={{ 
                                                duration: 2,
                                                delay: i * 0.3,
                                                repeat: Infinity
                                            }}
                                        />
                                    ))}
                                </div>
                            )}

                            {/* Interactive overlay */}
                            <motion.div 
                                className="absolute inset-0 rounded-xl pointer-events-none"
                                animate={{ 
                                    background: isHovered 
                                        ? `linear-gradient(45deg, transparent, rgba(255, 117, 223, 0.05), transparent)`
                                        : 'transparent'
                                }}
                                transition={{ duration: 0.3 }}
                            />
                        </div>
                    </motion.div>

                    {/* Back of card - unchanged */}
                    <motion.div className="absolute inset-0 backface-hidden rotate-y-180">
                        <div className="relative w-full h-full bg-black/20 rounded-xl border border-white/10 backdrop-blur-[15px] overflow-hidden">
                            <div className="relative z-10 h-full flex flex-col">
                                {/* Fixed Header */}
                                <motion.div 
                                    className="flex-shrink-0 bg-white/10 backdrop-blur-md px-6 py-3 border-b border-white/20"
                                    initial={{ opacity: 0, x: -20 }}
                                    animate={{ opacity: 1, x: 0 }}
                                >
                                    <h4 className="text-white text-lg italic tracking-tight font-black flex items-center gap-2">
                                        <Award className="w-5 h-5 text-[#ff75df]" />
                                        Certificate Details
                                    </h4>
                                </motion.div>

                                {/* Scrollable content area */}
                                <div className="flex-1 overflow-y-auto px-6 py-4 space-y-4 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent">
                                    {/* Description */}
                                    <motion.div
                                        initial={{ opacity: 0 }}
                                        animate={{ opacity: 1 }}
                                    >
                                        <p className="text-white/90 text-sm leading-relaxed">
                                            {certificate.description}
                                        </p>
                                    </motion.div>
                                    
                                    {/* Skills section */}
                                    <motion.div
                                        initial={{ opacity: 0, x: -20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                    >
                                        <h5 className="text-white text-sm mb-3 italic tracking-tight font-black">
                                            Skills & Competencies
                                        </h5>
                                        
                                        <div className="flex flex-wrap gap-2 mb-4">
                                            {certificate.skills.map((skill, idx) => (
                                                <motion.span 
                                                    key={skill} 
                                                    className="px-3 py-1 text-xs font-medium text-white/90 bg-white/20 backdrop-blur-sm rounded-full border border-white/30"
                                                    initial={{ opacity: 0, y: 10 }}
                                                    animate={{ opacity: 1, y: 0 }}
                                                    whileHover={{ scale: 1.1, backgroundColor: "rgba(255, 117, 223, 0.3)" }}
                                                >
                                                    {skill}
                                                </motion.span>
                                            ))}
                                        </div>
                                    </motion.div>

                                    {/* Verification details */}
                                    <motion.div
                                        initial={{ opacity: 0, y: 20 }}
                                        animate={{ opacity: 1, y: 0 }}
                                    >
                                        <h5 className="text-white text-sm mb-3 italic tracking-tight font-black">
                                            Verification Details
                                        </h5>
                                        <div className="space-y-3 p-4 bg-white/5 rounded-lg border border-white/20">
                                            <div className="flex items-center justify-between">
                                                <span className="text-white/70 text-xs">Issued Date:</span>
                                                <span className="text-white/90 text-xs font-medium">{formatDate(certificate.date)}</span>
                                            </div>
                                            <div className="flex items-center justify-between">
                                                <span className="text-white/70 text-xs">Credential ID:</span>
                                                <span className="text-white/90 text-xs font-mono break-all">{certificate.credentialId}</span>
                                            </div>
                                            <div className="flex items-center justify-between">
                                                <span className="text-white/70 text-xs">Status:</span>
                                                <span className="text-green-400 text-xs font-medium flex items-center gap-1">
                                                    <CheckCircle className="w-3 h-3" />
                                                    Verified
                                                </span>
                                            </div>
                                        </div>
                                    </motion.div>

                                    {/* Action button */}
                                    <motion.button 
                                        onClick={handleVerificationClick}
                                        className="w-full py-3 px-4 bg-[#ff75df]/30 hover:bg-[#ff75df]/50 border border-[#ff75df]/50 rounded-lg text-white italic tracking-tight font-black transition-all duration-300 backdrop-blur-sm flex items-center justify-center gap-2"
                                        whileHover={{ scale: 1.02, y: -2 }}
                                        whileTap={{ scale: 0.98 }}
                                    >
                                        <ExternalLink className="w-4 h-4" />
                                        View Certificate
                                    </motion.button>

                                    {/* Footer */}
                                    <div className="text-center py-4">
                                        <span className="text-white/50 text-sm font-light italic">
                                            Click to flip back
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </motion.div>
                </motion.div>
            </motion.div>

            {/* Certificate Modal */}
            <CertificateModal 
                certificate={certificate}
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
            />
        </>
    );
}

// Add Seminar Card component after CertificateCard function
function SeminarCard({ seminar, index }) {
    const [imageLoaded, setImageLoaded] = useState(false);
    const [isHovered, setIsHovered] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const getTypeColor = (type) => {
        const colors = {
            "Training Course": { 
                gradient: "from-blue-500/30 to-cyan-500/30", 
                border: "border-blue-400/40",
                accent: "text-blue-300",
                glow: "shadow-blue-500/20"
            },
            "Conference": { 
                gradient: "from-purple-500/30 to-pink-500/30", 
                border: "border-purple-400/40",
                accent: "text-purple-300",
                glow: "shadow-purple-500/20"
            },
            "Workshop": { 
                gradient: "from-green-500/30 to-emerald-500/30", 
                border: "border-green-400/40",
                accent: "text-green-300",
                glow: "shadow-green-500/20"
            },
            "Seminar": { 
                gradient: "from-orange-500/30 to-yellow-500/30", 
                border: "border-orange-400/40",
                accent: "text-orange-300",
                glow: "shadow-orange-500/20"
            }
        };
        return colors[type] || { 
            gradient: "from-gray-500/30 to-gray-600/30", 
            border: "border-gray-400/40",
            accent: "text-gray-300",
            glow: "shadow-gray-500/20"
        };
    };

    const typeStyle = getTypeColor(seminar.type);

    return (
        <>
            <motion.div 
                className="group relative cursor-pointer"
                initial={{ opacity: 0, y: 50, scale: 0.9 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                transition={{ 
                    delay: index * 0.1,
                    type: "spring",
                    stiffness: 100,
                    damping: 15
                }}
                whileHover={{ 
                    y: -10,
                    scale: 1.02,
                    transition: { type: "spring", stiffness: 300, damping: 20 }
                }}
                onMouseEnter={() => setIsHovered(true)}
                onMouseLeave={() => setIsHovered(false)}
                onClick={() => setIsModalOpen(true)}
            >
                {/* Glowing background effect */}
                <motion.div 
                    className={`absolute -inset-2 bg-gradient-to-r ${typeStyle.gradient} rounded-2xl blur-md opacity-0 group-hover:opacity-100 transition-all duration-500 ${typeStyle.glow}`}
                    animate={{ 
                        scale: isHovered ? [1, 1.05, 1] : 1,
                        opacity: isHovered ? [0.5, 0.8, 0.5] : 0
                    }}
                    transition={{ duration: 2, repeat: isHovered ? Infinity : 0 }}
                />

                {/* Main card */}
                <div className={`relative bg-gradient-to-br ${typeStyle.gradient} backdrop-blur-lg border ${typeStyle.border} rounded-xl p-6 h-full transition-all duration-500 group-hover:shadow-xl group-hover:${typeStyle.glow}`}>
                    
                    {/* Animated corner decorations */}
                    <motion.div 
                        className={`absolute top-3 right-3 w-6 h-6 border-t-2 border-r-2 ${typeStyle.border} rounded-tr-lg`}
                        initial={{ opacity: 0, scale: 0 }}
                        animate={{ opacity: isHovered ? 1 : 0.3, scale: isHovered ? 1.2 : 1 }}
                        transition={{ duration: 0.3 }}
                    />
                    <motion.div 
                        className={`absolute bottom-3 left-3 w-6 h-6 border-b-2 border-l-2 ${typeStyle.border} rounded-bl-lg`}
                        initial={{ opacity: 0, scale: 0 }}
                        animate={{ opacity: isHovered ? 1 : 0.3, scale: isHovered ? 1.2 : 1 }}
                        transition={{ duration: 0.3, delay: 0.1 }}
                    />

                    {/* Type badge with enhanced animation */}
                    <motion.span 
                        className={`absolute -top-3 -right-3 px-4 py-2 text-xs italic tracking-tight font-black text-white bg-gradient-to-r ${typeStyle.gradient} backdrop-blur-sm rounded-full border ${typeStyle.border} shadow-lg`}
                        initial={{ scale: 0, rotate: -180 }}
                        animate={{ scale: 1, rotate: 0 }}
                        whileHover={{ scale: 1.1, rotate: 5 }}
                        transition={{ 
                            delay: index * 0.1 + 0.3,
                            type: "spring",
                            stiffness: 200
                        }}
                    >
                        {seminar.type}
                    </motion.span>

                    <div className="flex gap-6">
                        {/* Enhanced image with animations */}
                        <motion.div 
                            className="flex-shrink-0 w-20 h-20 relative overflow-hidden rounded-xl border border-white/30 group-hover:border-white/50"
                            whileHover={{ scale: 1.05, rotate: 2 }}
                            transition={{ duration: 0.3 }}
                        >
                            <motion.img 
                                src={seminar.image} 
                                alt={seminar.title}
                                className={`w-full h-full object-cover transition-all duration-500 ${imageLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-110'}`}
                                onLoad={() => setImageLoaded(true)}
                                animate={{ 
                                    scale: isHovered ? 1.1 : 1,
                                    filter: isHovered ? 'brightness(1.2)' : 'brightness(1)'
                                }}
                                transition={{ duration: 0.3 }}
                            />
                            <motion.div 
                                className="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-black/30"
                                animate={{ opacity: isHovered ? 0.8 : 0.5 }}
                            />
                            
                            {/* View indicator overlay */}
                            <motion.div 
                                className="absolute inset-0 bg-black/50 flex items-center justify-center"
                                initial={{ opacity: 0 }}
                                animate={{ opacity: isHovered ? 1 : 0 }}
                                transition={{ duration: 0.3 }}
                            >
                                <motion.div
                                    className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-white/30"
                                    animate={{ scale: isHovered ? [1, 1.2, 1] : 1 }}
                                    transition={{ duration: 0.6, repeat: isHovered ? Infinity : 0 }}
                                >
                                    <ExternalLink className="w-4 h-4 text-white" />
                                </motion.div>
                            </motion.div>
                            
                            {/* Floating particles around image */}
                            {isHovered && (
                                <div className="absolute inset-0 pointer-events-none">
                                    {[...Array(4)].map((_, i) => (
                                        <motion.div
                                            key={i}
                                            className={`absolute w-1 h-1 ${typeStyle.accent} rounded-full`}
                                            initial={{ 
                                                x: '50%', 
                                                y: '50%',
                                                opacity: 0 
                                            }}
                                            animate={{ 
                                                x: [20, 80, 20][i % 3] + '%',
                                                y: [20, 80, 20][i % 3] + '%',
                                                opacity: [0, 1, 0]
                                            }}
                                            transition={{ 
                                                duration: 1.5,
                                                delay: i * 0.2,
                                                repeat: Infinity
                                            }}
                                        />
                                    ))}
                                </div>
                            )}
                        </motion.div>

                        {/* Enhanced content */}
                        <div className="flex-1 min-w-0">
                            <motion.h4 
                                className="text-white italic tracking-tight font-black text-base leading-tight mb-3 line-clamp-2"
                                animate={{ 
                                    x: isHovered ? 5 : 0,
                                    color: isHovered ? '#ffffff' : '#f0f0f0'
                                }}
                                transition={{ duration: 0.3 }}
                            >
                                {seminar.title}
                            </motion.h4>
                            
                            <motion.p 
                                className="text-white/80 text-sm mb-3 flex items-center gap-2"
                                animate={{ x: isHovered ? 5 : 0 }}
                                transition={{ duration: 0.3, delay: 0.1 }}
                            >
                                <motion.div
                                    animate={{ rotate: isHovered ? 360 : 0 }}
                                    transition={{ duration: 0.8 }}
                                >
                                    <Award className="w-4 h-4 text-[#ff75df]" />
                                </motion.div>
                                {seminar.organizer}
                            </motion.p>
                            
                            <motion.div 
                                className="flex items-center justify-between text-sm"
                                animate={{ x: isHovered ? 5 : 0 }}
                                transition={{ duration: 0.3, delay: 0.2 }}
                            >
                                <span className="flex items-center gap-2 text-white/70">
                                    <motion.div
                                        animate={{ scale: isHovered ? [1, 1.2, 1] : 1 }}
                                        transition={{ duration: 0.6, repeat: isHovered ? Infinity : 0 }}
                                    >
                                        <Calendar className="w-4 h-4 text-[#ff75df]" />
                                    </motion.div>
                                    {new Date(seminar.date).toLocaleDateString('en-US', { 
                                        month: 'short', 
                                        day: 'numeric',
                                        year: 'numeric' 
                                    })}
                                </span>
                                <motion.span 
                                    className={`text-xs ${typeStyle.accent} font-medium truncate ml-2`}
                                    animate={{ opacity: isHovered ? 1 : 0.7 }}
                                >
                                    {seminar.location}
                                </motion.span>
                            </motion.div>
                        </div>
                    </div>

                    {/* Click indicator */}
                    <motion.div 
                        className="absolute bottom-3 right-3 flex items-center gap-2"
                        animate={{ opacity: isHovered ? 1 : 0.5 }}
                        transition={{ duration: 0.3 }}
                    >
                        <span className="text-white/60 text-xs italic">
                            Click to view
                        </span>
                        <motion.div
                            animate={{ x: isHovered ? [0, 5, 0] : 0 }}
                            transition={{ duration: 0.8, repeat: isHovered ? Infinity : 0 }}
                        >
                            <ExternalLink className="w-3 h-3 text-[#ff75df]" />
                        </motion.div>
                    </motion.div>

                    {/* Interactive hover overlay */}
                    <motion.div 
                        className="absolute inset-0 rounded-xl pointer-events-none"
                        animate={{ 
                            background: isHovered 
                                ? `linear-gradient(45deg, transparent, rgba(255, 117, 223, 0.1), transparent)`
                                : 'transparent'
                        }}
                        transition={{ duration: 0.3 }}
                    />
                </div>
            </motion.div>

            {/* Modal for viewing certificate */}
            <SeminarModal 
                seminar={seminar}
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
            />
        </>
    );
}

function CertificateModal({ certificate, isOpen, onClose }) {
    if (!isOpen) return null;

    return (
        <AnimatePresence>
            <motion.div 
                className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[70] flex items-center justify-center p-4"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={onClose}
            >
                <motion.div 
                    className="relative max-w-4xl w-full max-h-[80vh] bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl overflow-hidden z-[71]"
                    initial={{ scale: 0.8, opacity: 0, y: 50 }}
                    animate={{ scale: 1, opacity: 1, y: 0 }}
                    exit={{ scale: 0.8, opacity: 0, y: 50 }}
                    onClick={(e) => e.stopPropagation()}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                >
                    {/* Header */}
                    <div className="bg-gradient-to-r from-[#ff75df]/20 to-purple-500/20 p-6 border-b border-white/20">
                        <div className="flex items-center justify-between">
                            <div className="flex-1">
                                <h3 className="text-white text-xl italic tracking-tight font-black">
                                    {certificate.title}
                                </h3>
                                <p className="text-white/70 text-sm mt-1 flex items-center gap-2">
                                    <Award className="w-4 h-4 text-[#ff75df]" />
                                    {certificate.issuer} • {new Date(certificate.date).toLocaleDateString('en-US', { 
                                        year: 'numeric', 
                                        month: 'long', 
                                        day: 'numeric' 
                                    })}
                                </p>
                            </div>
                            <motion.button
                                onClick={onClose}
                                className="w-10 h-10 rounded-full bg-white/10 border border-white/20 flex items-center justify-center text-white/70 hover:text-white hover:bg-white/20 transition-all duration-300"
                                whileHover={{ scale: 1.1, rotate: 90 }}
                                whileTap={{ scale: 0.9 }}
                            >
                                ✕
                            </motion.button>
                        </div>
                    </div>

                    {/* Certificate Image */}
                    <div className="p-6 flex justify-center bg-black/20">
                        <motion.div 
                            className="relative max-w-full"
                            initial={{ scale: 0.9, opacity: 0 }}
                            animate={{ scale: 1, opacity: 1 }}
                            transition={{ delay: 0.2 }}
                        >
                            <img 
                                src={certificate.image} 
                                alt={certificate.title}
                                className="max-w-full max-h-[50vh] object-contain rounded-lg border border-white/20 shadow-2xl"
                            />
                            
                            {/* Image overlay gradient */}
                            <div className="absolute inset-0 bg-gradient-to-t from-black/10 via-transparent to-transparent rounded-lg pointer-events-none" />
                        </motion.div>
                    </div>
                </motion.div>
            </motion.div>
        </AnimatePresence>
    );
}

function SeminarModal({ seminar, isOpen, onClose }) {
    if (!isOpen) return null;

    return (
        <AnimatePresence>
            <motion.div 
                className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[70] flex items-center justify-center p-4"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                onClick={onClose}
            >
                <motion.div 
                    className="relative max-w-4xl w-full max-h-[80vh] bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl overflow-hidden z-[71]"
                    initial={{ scale: 0.8, opacity: 0, y: 50 }}
                    animate={{ scale: 1, opacity: 1, y: 0 }}
                    exit={{ scale: 0.8, opacity: 0, y: 50 }}
                    onClick={(e) => e.stopPropagation()}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                >
                    {/* Header */}
                    <div className="bg-gradient-to-r from-[#ff75df]/20 to-purple-500/20 p-6 border-b border-white/20">
                        <div className="flex items-center justify-between">
                            <div>
                                <h3 className="text-white text-xl italic tracking-tight font-black">
                                    {seminar.title}
                                </h3>
                                <p className="text-white/70 text-sm mt-1">
                                    {seminar.organizer} • {new Date(seminar.date).toLocaleDateString('en-US', { 
                                        year: 'numeric', 
                                        month: 'long', 
                                        day: 'numeric' 
                                    })}
                                </p>
                            </div>
                            <motion.button
                                onClick={onClose}
                                className="w-10 h-10 rounded-full bg-white/10 border border-white/20 flex items-center justify-center text-white/70 hover:text-white hover:bg-white/20 transition-all duration-300"
                                whileHover={{ scale: 1.1, rotate: 90 }}
                                whileTap={{ scale: 0.9 }}
                            >
                                ✕
                            </motion.button>
                        </div>
                    </div>

                    {/* Certificate Image */}
                    <div className="p-6 flex justify-center">
                        <motion.div 
                            className="relative max-w-full"
                            initial={{ scale: 0.9, opacity: 0 }}
                            animate={{ scale: 1, opacity: 1 }}
                            transition={{ delay: 0.2 }}
                        >
                            <img 
                                src={seminar.image} 
                                alt={seminar.title}
                                className="max-w-full max-h-[50vh] object-contain rounded-lg border border-white/20 shadow-2xl"
                            />
                            
                            {/* Image overlay gradient */}
                            <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent rounded-lg pointer-events-none" />
                        </motion.div>
                    </div>

                    {/* Footer Actions */}
                    {/* <div className="p-6 bg-black/20 border-t border-white/20">
                        <div className="flex flex-col sm:flex-row gap-4 justify-between items-center">
                            <div className="flex items-center gap-4 text-sm text-white/70">
                                <span className="flex items-center gap-2">
                                    <Calendar className="w-4 h-4" />
                                    {seminar.location}
                                </span>
                                <span className="flex items-center gap-2">
                                    <Award className="w-4 h-4 text-[#ff75df]" />
                                    {seminar.type}
                                </span>
                            </div>
                            
                            <motion.button
                                onClick={() => {
                                    const link = document.createElement('a');
                                    link.href = seminar.image;
                                    link.download = `${seminar.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_certificate.png`;
                                    link.click();
                                }}
                                className="px-6 py-3 bg-[#ff75df]/30 hover:bg-[#ff75df]/50 border border-[#ff75df]/50 rounded-lg text-white italic tracking-tight font-black transition-all duration-300 backdrop-blur-sm flex items-center gap-2"
                                whileHover={{ scale: 1.05, y: -2 }}
                                whileTap={{ scale: 0.95 }}
                            >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                Download Certificate
                            </motion.button>
                        </div>
                    </div> */}
                </motion.div>
            </motion.div>
        </AnimatePresence>
    );
}


function CertificateGrid() {
    const [selectedCategory, setSelectedCategory] = useState("All");

    const filteredCertificates = selectedCategory === "All"
        ? certificates
        : certificates.filter(cert => cert.category === selectedCategory);

    const totalHours = certificates.reduce((total, cert) => {
        return total + (cert.skills.length * 12);
    }, 0);

    return (
        <div className="flex flex-col items-center py-12 sm:py-20 max-w-7xl mx-auto w-11/12 sm:w-2/3 relative px-4 sm:px-6">
            {/* Enhanced title with animation */}
            <motion.div 
                className="w-full flex justify-start mb-12 sm:mb-20 relative z-10"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, ease: "easeOut" }}
            >
                <div className="relative">
                    <motion.h2 
                        className="text-transparent bg-gradient-to-r from-white via-white/95 to-white/80 bg-clip-text text-4xl sm:text-5xl md:text-6xl lg:text-7xl italic tracking-tight font-black leading-none text-left"
                        initial={{ opacity: 0, x: -100 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ duration: 1 }}
                    >
                        Certifications<span className="text-[#ff75df]">_</span>
                        <br />
                        earned<span className="text-[#ff75df]">:</span>
                    </motion.h2>
                    <motion.div 
                        className="absolute -bottom-1 sm:-bottom-2 left-0 w-24 sm:w-32 h-0.5 sm:h-1 bg-[#ff75df] rounded-full"
                        initial={{ width: 0 }}
                        animate={{ width: "8rem" }}
                        transition={{ duration: 1 }}
                    />
                </div>
            </motion.div>

            {/* Enhanced category filters */}
            <motion.div 
                className="w-full flex flex-wrap justify-center gap-3 sm:gap-4 mb-12 sm:mb-16 relative z-20"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
            >
                {categories.map((category, index) => (
                    <motion.button
                        key={category.name}
                        onClick={() => setSelectedCategory(category.name)}
                        className={`flex items-center gap-2 px-4 sm:px-6 py-3 sm:py-4 rounded-full italic tracking-tight font-black transition-all duration-300 ${
                            selectedCategory === category.name
                                ? 'bg-white/10 border border-[#ff75df]/50 text-[#e2dbd2] backdrop-blur-sm shadow-lg shadow-[#ff75df]/20'
                                : 'text-white/70 hover:text-white hover:bg-white/5 backdrop-blur-sm'
                        }`}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        whileHover={{ scale: 1.05, y: -2 }}
                        whileTap={{ scale: 0.95 }}
                    >
                        <category.icon className="w-4 h-4" />
                        <span>{category.name}</span>
                        <motion.span 
                            className="text-xs bg-white/20 px-2 py-1 rounded-full"
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                        >
                            {category.count}
                        </motion.span>
                    </motion.button>
                ))}
            </motion.div>

            {/* Certificates grid with stagger animation */}
            <AnimatePresence mode="wait">
                <motion.div 
                    key={selectedCategory}
                    className="w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8 relative"
                    variants={containerVariants}
                    initial="hidden"
                    animate="visible"
                    exit="hidden"
                >
                    {filteredCertificates.map((certificate, index) => (
                        <CertificateCard
                            key={certificate.credentialId}
                            certificate={certificate}
                            index={index}
                        />
                    ))}
                </motion.div>
            </AnimatePresence>

            {/* Enhanced Seminars & Workshops Section */}
            <motion.div 
                className="w-full mt-20 sm:mt-24 relative z-20"
                initial={{ opacity: 0, y: 100 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 1, delay: 0.4 }}
            >
                <motion.div 
                    className="mb-12 sm:mb-16 text-center"
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.8, delay: 0.2 }}
                >
                    <motion.h3 
                        className="text-transparent bg-gradient-to-r from-white via-white/95 to-white/80 bg-clip-text text-3xl sm:text-4xl md:text-5xl italic tracking-tight font-black mb-4"
                        animate={{ 
                            backgroundPosition: ['0% 50%', '100% 50%', '0% 50%']
                        }}
                        transition={{ duration: 5, repeat: Infinity }}
                        style={{ backgroundSize: '200% 200%' }}
                    >
                        Seminars & Workshops<span className="text-[#ff75df]">_</span>
                    </motion.h3>
                    <motion.p 
                        className="text-white/70 text-base sm:text-lg font-light max-w-2xl mx-auto"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.6 }}
                    >
                        Additional learning experiences and professional development initiatives
                    </motion.p>
                    
                    {/* Decorative line */}
                    <motion.div 
                        className="w-32 h-1 bg-gradient-to-r from-transparent via-[#ff75df] to-transparent mx-auto mt-6 rounded-full"
                        initial={{ scaleX: 0 }}
                        animate={{ scaleX: 1 }}
                        transition={{ duration: 1, delay: 0.8 }}
                    />
                </motion.div>

                <motion.div 
                    className="grid grid-cols-1 sm:grid-cols-2 gap-6 sm:gap-8"
                    variants={containerVariants}
                    initial="hidden"
                    animate="visible"
                >
                    {seminars.map((seminar, index) => (
                        <SeminarCard
                            key={`${seminar.title}-${seminar.date}`}
                            seminar={seminar}
                            index={index}
                        />
                    ))}
                </motion.div>
            </motion.div>

            {/* Enhanced stats section */}
            <motion.div 
                className="w-full mt-16 sm:mt-20 relative z-10"
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
            >
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-8">
                    {[
                        { value: certificates.length, label: "Certificates", icon: Award },
                        { value: categories.length - 1, label: "Categories", icon: Grid3X3 },
                        { value: "100%", label: "Verified", icon: CheckCircle },
                        { value: `${totalHours}+`, label: "Hours", icon: Calendar }
                    ].map((stat, index) => (
                        <motion.div 
                            key={stat.label}
                            className="text-center p-4 bg-white/5 rounded-xl border border-white/20 backdrop-blur-sm"
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            whileHover={{ scale: 1.05, backgroundColor: "rgba(255, 255, 255, 0.1)" }}
                        >
                            <motion.div 
                                className="flex justify-center mb-2"
                                animate={{ rotate: [0, 5, -5, 0] }}
                                transition={{ duration: 2, repeat: Infinity }}
                            >
                                <stat.icon className="w-6 h-6 text-[#ff75df]" />
                            </motion.div>
                            <motion.div 
                                className="text-2xl sm:text-3xl md:text-4xl italic tracking-tight font-black text-white"
                                initial={{ scale: 0 }}
                                animate={{ scale: 1 }}
                                transition={{ 
                                    type: "spring",
                                    stiffness: 200
                                }}
                            >
                                {stat.value}
                            </motion.div>
                            <div className="text-white/60 text-sm sm:text-base font-light">
                                {stat.label}
                            </div>
                        </motion.div>
                    ))}
                </div>
            </motion.div>

            {/* Bottom decoration */}
            <motion.div 
                className="w-full mt-12 sm:mt-20 flex justify-center"
                initial={{ opacity: 0, scale: 0 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.8 }}
            >
                <div className="w-64 h-px bg-gradient-to-r from-transparent via-[#ff75df]/50 to-transparent" />
            </motion.div>
        </div>
    );
}

export default CertificateGrid;